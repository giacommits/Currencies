@model MVCCurrenciesUI.Models.CurrenciesViewModel

@{
    ViewBag.Title = "Currencies";
}

@using (Html.BeginForm("GetRate", "Home"))
{
    <br/>

    <div class="container">
        <div class="row">
            <div class="col-sm-2 col-xs-3">
                @Html.EditorFor(model => model.BaseValue, new { htmlAttributes = new { autocomplete = "off", @class = "form-control", @id = "baseValue", style = "height:34px" } })
            </div>
            <div class="col-xs-1">
                @Html.DropDownListFor(model => model.SelectedBase, new SelectList((Session["CurrenciesList"]) as List<string>), new { @id = "baseCurrency", style = "height:34px" })
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-sm-2 col-xs-3">
                @Html.EditorFor(model => model.QuoteValue, new { htmlAttributes = new { autocomplete = "off", @class = "form-control", @id = "quoteValue", style = "height:34px" } })
            </div>
            <div class="col-xs-1">
                @Html.DropDownListFor(model => model.SelectedQuote, new SelectList((Session["CurrenciesList"]) as List<string>), new { @id = "quoteCurrency", style = "height:34px" })
            </div>
        </div>
        <br />
        <div class="row">
            <span class="col-xs-1 col-sm-offset-2 col-xs-offset-3">
                @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "datepicker",@id = "date", style = "height:34px" } })
            </span>
        </div>

        <div>
            @Html.HiddenFor(model => model.StartDate)
            @Html.HiddenFor(model => model.EndDate)
            @Html.HiddenFor(model => model.Rate)
        </div>

    </div>

}


<link href="~/Content/themes/base/jquery-ui.min.css" rel="stylesheet" />


@section scripts{
    <script src="~/Scripts/jquery-ui-1.12.1.min.js"></script>
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

    <script>

        $(document).ready(function () {
                $(".datepicker").attr('readonly', true).datepicker({

                    dateFormat: "yy-mm-dd",
                    changeMonth: true,
                    changeYear: true,
                    constrainInput: true,
                    yearRange: "@Model.StartDate.Year:@Model.EndDate.Year",
                    minDate: new Date( @Model.StartDate.Year, @Model.StartDate.Month - 1, @Model.StartDate.Day),
                    maxDate: new Date(@Model.EndDate.Year, @Model.EndDate.Month - 1, @Model.EndDate.Day),
                    disabled: false,
                    onSelect: function (dateText, inst) {
                        if (dateText != date) {
                            date = dateText;
                            getRate();
                        }
                    }
                }).datepicker("setDate", new Date(@Model.Date.Year, @Model.Date.Month - 1, @Model.Date.Day ));
            });



        $(document).ready(function () {
                $("input[type='text']").keypress(function (event) {
                    if ((event.which != 46 || $(this).val().indexOf('.') != -1) && (event.which < 48 || event.which > 57)) {
                        event.preventDefault();
                    }
                });
            });


        $(document).ready(function () {
                var lastValue = "";
                $("#baseValue").on('keyup paste', function () {
                    if (isNaN($(this).val())) {
                        alert("Not a valid number!");
                        $("input:text").val("");
                    }
                    else if ($(this).val() != lastValue) {
                        lastValue = $(this).val();
                        calculateQuoteValue();
                    }
                });
            });



        $(document).ready(function () {
                var lastValue = "";
                $("#quoteValue").on('keyup paste', function () {
                    if (isNaN($(this).val())) {
                        alert("Not a valid number!");
                        $("input:text").val("");
                    }
                    else if ($(this).val() != lastValue) {
                        lastValue = $(this).val();
                        calculateBaseValue();
                    }
                });
            });



        $(document).ready(function () {
            var lastValue;

                $("select").on("keyup mouseup", function () {
                    if ($(this).closest("select").attr("id") == "baseCurrency") {
                        lastValue = lastSelectedBase;
                        lastSelectedBase = $("#baseCurrency").val();
                    }
                    if ($(this).closest("select").attr("id") == "quoteCurrency") {
                        lastValue = lastSelectedQuote;
                        lastSelectedQuote = $("#quoteCurrency").val();
                    }
                    if ($(this).val() != lastValue) {
                        // $("form").submit();
                        getRate();
                    }
                });
            });

        $(document).ready(function () {
                $("#Rate").change(calculateQuoteValue());
            });


        var lastSelectedBase = $("#baseCurrency").val();
        var lastSelectedQuote = $("#quoteCurrency").val();
        var lastSelectedDate = $("#date").val();

        var getRate = function () {
            var url = "@Url.Action("GetRate")";
            var data = $("form").serialize();
            $('form :input').prop("disabled", true);
            $.get(url, data).done(function (result) {
                $('form :input').prop("disabled", false)
                    $("#Rate").val(result);
                    calculateQuoteValue();
            }).fail(function (err) {
                $('form :input').prop("disabled", false);
                $('#baseValue').prop('disabled', true);
                $('#quoteValue').prop('disabled', true);
                    alert("Sorry, couldn't retrieve the result: " + err.status + " " + err.statusText);
                    $("#quoteValue").val("");
                    $("#baseValue").val("1");
                });
        }

        var disableControls = function () {

        }

        var calculateQuoteValue = function () {
            if ($("#baseValue").val() == "") {
                $("#quoteValue").val("");
            }
            else {
                var baseValue = parseFloat($("#baseValue").val());
                var rate = parseFloat($("#Rate").val());
                $("#quoteValue").val(parseFloat((baseValue * rate).toFixed(4)));
            }
        }

        var calculateBaseValue = function () {
            if ($("#quoteValue").val() == "") {
                $("#baseValue").val("");
            }
            else {
                var quoteValue = parseFloat($("#quoteValue").val());
                var rate = parseFloat($("#Rate").val());
                $("#baseValue").val(parseFloat((quoteValue / rate).toFixed(4)));
            }
        }

    </script>
}
@*

            <h2>Index</h2>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <h4>RateAndDate</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                <div class="form-group">
                    @Html.LabelFor(model => model.BaseValue, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BaseValue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.BaseValue, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.QuoteValue, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.QuoteValue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.QuoteValue, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedBase, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SelectedBase, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SelectedBase, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.SelectedValue, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SelectedValue, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.SelectedValue, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Save" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>


    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
    }

*@
